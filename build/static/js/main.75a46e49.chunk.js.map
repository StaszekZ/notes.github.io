{"version":3,"sources":["assets/icons/trash.svg","assets/icons/edit.svg","assets/icons/logout.svg","assets/icons/save.svg","Theme/GlobalStyle.js","components/Todo/TodoItem.js","utils/database.js","reducers/index.js","store/todosStore.js","components/Button/Button.js","components/NavBar/NavBar.js","utils/theme.js","utils/colors.js","components/Todo/TodoInput.js","components/Form/Form.js","components/Modal/Modal.js","Layout/MainLayout.js","components/H1/H1.js","components/views/Todos.js","components/views/App.js","components/views/Notes.js","components/views/SignIn.js","components/views/Root.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","StyledTdWithHover","styled","td","theme","colors","primary","deadline","css","StyledTd","StyledButton","button","TodoItem","content","id","completed","index","onEdit","onDelete","onCompleteCheck","key","className","as","onClick","src","editIcon","deleteIcon","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","DATABASE_URL","initialState","todos","isLoading","editID","error","setTodos","type","payload","fetchTodos","dispatch","fetch","then","r","json","arrayTodos","Object","keys","map","middleware","applyMiddleware","thunk","store","next","action","console","group","log","getState","result","groupEnd","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","todosStore","createStore","state","Link","white","media","desktop","modal","ButtonLink","children","to","Bar","div","isBig","dark","StyledButtonPlace","StyledLogo","ButtonIcon","icon","active","NavBar","Button","logoutIcon","blur","font","this","regular","bold","fontSize","xxs","xs","s","m","l","xl","phone","StyledInput","input","React","Component","StyledLabel","label","StyledModalInput","StyledForm","form","StyledButtonWrapper","AddTask","putDataInDatabase","method","body","JSON","stringify","props","onAdd","setState","handleOnInputClick","e","preventDefault","alert","handleOnChange","target","name","value","htmlFor","placeholder","onChange","onQuit","StyledWrapper","isVisible","Modal","StyledAddItemButton","onModalOpen","MainLayout","useState","isNewItemBarVisible","setIsNewItemBarVisible","prevState","StyledH1","h1","StyledH2","h2","StyledTodoList","StyledTable","Table","Todos","striped","responsive","colSpan","Spinner","animation","todo","setCompleted","length","mapDispatchToProps","addNewTask","taskData","completedId","connect","App","Notes","style","color","SignIn","Root","basename","process","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,2kBCE3C,IAwBeC,EAxBKC,YAAH,K,2jBCKjB,IAAMC,EAAoBC,IAAOC,GAAV,KAIV,qBAAGC,MAAkBC,OAAOC,WAErC,qBAAGC,UAEHC,YADQ,QAMNC,EAAWP,IAAOC,GAAV,KAIDO,EAAeR,IAAOS,OAAV,KAuDVC,EAhDE,SAAC,GASX,IARLC,EAQI,EARJA,QACAC,EAOI,EAPJA,GACAP,EAMI,EANJA,SACAQ,EAKI,EALJA,UACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,SACAC,EACI,EADJA,gBAcA,OACE,wBAAIC,IAAKN,GACP,wBAAIO,UAAU,gBAAgBL,EAAQ,GACtC,kBAACf,EAAD,CAAmBoB,UAAU,4BAA4BC,GAAG,MACzDT,GAEH,wBAAIQ,UAAU,gBACZ,kBAACX,EAAD,CAAca,QAnBC,WACnBN,EAAOH,KAmBD,yBAAKU,IAAKC,MAAa,MAG3B,wBAAIJ,UAAU,gBACZ,kBAACX,EAAD,CAAca,QApBG,WACrBL,EAASJ,KAoBH,yBAAKU,IAAKE,QAGd,kBAACzB,EAAD,CAAmBM,UAAQ,EAACc,UAAU,eAAeC,GAAG,MACrDf,GAEH,kBAACE,EAAD,CAAUY,UAAU,eAAeE,QAvBV,WAC3BJ,EAAgBL,EAAID,EAASN,EAAUQ,KAuBlCA,EAAY,eAAO,Y,QCtEtBY,EAAiB,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,OAGjBC,EAASC,cAAcV,GAGhB,IAAMW,EAAeX,EAAeG,YCfrCS,EAAe,CACnBC,MAAO,GACPC,WAAW,EACXC,OAAQ,KACRC,MAAO,MAgDIC,EAAW,SAAAJ,GAAK,MAAK,CAAEK,KAzClB,YAyCmCC,QAASN,IA0BjDO,EAAa,WACxB,OAAO,SAAAC,GACLA,EA7B6B,CAAEH,KA3Cf,gBA0EhBI,MAAM,GAAD,OAAIX,EAAJ,gBACFY,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAV,GACJ,IAAMa,EAAab,EACfc,OAAOC,KAAKf,GAAOgB,KAAI,SAAApC,GACrB,OAAO,aACLN,GAAIM,GACDoB,EAAMpB,OAGb,GACJ4B,EAASJ,EAASS,SCjFpBI,EAAaC,YAAgBC,KAVpB,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAC,GAC9BC,QAAQC,MAAMF,EAAOjB,MACrBkB,QAAQE,IAAI,aAAcL,EAAMM,YAChCH,QAAQE,IAAI,cAAeH,GAC3B,IAAIK,EAASN,EAAKC,GAGlB,OAFAC,QAAQE,IAAI,aAAcL,EAAMM,YAChCH,QAAQK,WACDD,OAKHE,GADmBC,OAAOC,sCAAwCC,KACtCf,GAInBgB,EAFIC,aDFS,WAAmC,IAAlCC,EAAiC,uDAAzBpC,EAAcuB,EAAW,uCAC5D,OAAQA,EAAOjB,MACb,IALc,YAMZ,MAAO,CACLF,MAAO,KACPF,WAAW,EACXC,OAAQ,KACRF,MAAOsB,EAAOhB,SAGlB,IAhBgB,cAiBd,OAAO,2BACF6B,GADL,IAEElC,WAAW,IAGf,IArBa,WAsBX,MAAO,CACLE,MAAO,KACPF,WAAW,EACXC,OAAQ,KACRF,MAAOsB,EAAOhB,SAWlB,QACE,OAAO6B,KC/BgCN,G,2sBCdtC,IAAM3D,EAAeR,YAAO0E,IAAP1E,CAAH,KAQT,qBAAGE,MAAkBC,OAAOwE,SAGjC,qBAAGzE,MAAkBC,OAAOwE,SAKnC,qBAAGzE,MAAkB0E,MAAMC,WACb,qBAAG3E,MAAkBC,OAAOwE,SACjC,qBAAGzE,MAAkBC,OAAOC,WAKvB,qBAAGF,MAAkBC,OAAOC,WACjC,qBAAGF,MAAkBC,OAAOwE,SAGrC,qBAAGG,OAAqBxE,YAAJ,QAQTyE,EAFI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,GAAb,OAAsB,kBAAC,EAAD,CAAcA,GAAIA,GAAKD,I,wnCC/BhE,IAAME,EAAMlF,IAAOmF,IAAV,KASM,qBAAGC,MAAqB,MAAQ,WAClB,qBAAGlF,MAAkBC,OAAOC,WACzC,qBAAGF,MAAkBC,OAAOkF,QAGtCC,GAAoBtF,IAAOmF,IAAV,KAQjBI,GAAavF,IAAOmF,IAAV,KAGM,qBAAGjF,MAAkBC,OAAOC,WACvC,qBAAGF,MAAkBC,OAAOwE,SAOjCa,GAAaxF,YAAO0E,IAAP1E,CAAH,KAKU,qBAAGyF,QAIP,qBAAGvF,MAAkBC,OAAOC,WAE5B,qBAAGsF,OAAuB,QAAU,iBAiB3CC,GAXA,kBACb,kBAACT,EAAD,KACE,kBAACI,GAAD,KACE,kBAACC,GAAD,0BACA,kBAACK,EAAD,CAAYX,GAAG,UAAf,SACA,kBAACW,EAAD,CAAYX,GAAG,UAAf,UAEF,kBAACO,GAAD,CAAYP,GAAG,SAASQ,KAAMI,QC7DrB3F,GAAQ,CACnBC,OCHoB,CACpBwE,MAAO,UACPvE,QAAS,UACTiF,KAAM,UACNS,KAAM,QDANC,KAAM,CACJC,KAAM,IACNC,QAAS,IACTC,KAAM,KAERC,SAAU,CACRC,IAAK,OACLC,GAAI,SACJC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,GAAI,QAEN7B,MAAO,CACL8B,MAAO,4BACP7B,QAAS,6B,mcEXN,IAAM8B,GAAc3G,IAAO4G,MAAV,MAapB,qBAAGvG,UAEHC,YADQ,SAMYuG,IAAMC,U,yiBCrB9B,IAAMC,GAAc/G,IAAOgH,MAAV,MAMXC,GAAmBjH,YAAO2G,GAAP3G,CAAH,MAKhBkH,GAAalH,IAAOmH,KAAV,MASVC,GAAsBpH,IAAOmF,IAAV,MA0EVkC,G,4MAhEb5C,MAAQ,CACN9D,QAAS,GACTN,SAAU,GACVQ,WAAW,G,EAGbyG,kBAAoB,WAClBvE,MAAM,GAAD,OAAIX,EAAJ,gBAAgC,CACnCmF,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKjD,SAEzBzB,MAAK,WACJ,EAAK2E,MAAMC,WAEZ5E,MAAK,WACJ,EAAK6E,SAAS,CACZlH,QAAS,GACTN,SAAU,S,EAKlByH,mBAAqB,SAAAC,GAEnB,GADAA,EAAEC,kBACG,EAAKvD,MAAM9D,QACd,OAAOsH,MAAM,yBAEf,EAAKX,qB,EAIPY,eAAiB,SAAAH,GACf,EAAKF,SAAL,gBACGE,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,S,uDAI5B,OACE,kBAACnB,GAAD,KACE,kBAACH,GAAD,CAAauB,QAAQ,WAArB,kBACA,kBAACrB,GAAD,CACEmB,KAAK,UACLG,YAAY,6BACZF,MAAOrC,KAAKvB,MAAM9D,QAClB6H,SAAUxC,KAAKkC,iBAEjB,kBAACjB,GAAD,CAAkB5G,UAAQ,EACxB+H,KAAK,WACLG,YAAY,yBACZF,MAAOrC,KAAKvB,MAAMpE,SAClBmI,SAAUxC,KAAKkC,iBAEjB,kBAACd,GAAD,KAEE,kBAAC,EAAD,CAActC,OAAK,EAACnC,KAAK,SAAStB,QAAS2E,KAAK8B,oBAAhD,iBAGA,kBAAC,EAAD,CAAczG,QAAS2E,KAAKyC,QAA5B,c,GA1DY3B,a,gaC/BtB,IAAM4B,GAAgB1I,IAAOmF,IAAV,MACC,qBAAGjF,MAAkBC,OAAOC,WAGrC,qBAAGuI,UAA4B,OAAS,UAQ/B,qBAAGzI,MAAkBC,OAAOkF,QAEtB,qBAAGsD,UAA6B,QAAU,UAkBrDC,GAZD,SAAC,GAA0B,IAAxBD,EAAuB,EAAvBA,UAAWf,EAAY,EAAZA,MAE3B,OACC,kBAACc,GAAD,CAAeC,UAAWA,GACzB,kBAAC,GAAD,CAASf,MAAOA,M,4ZCrBnB,IAAMiB,GAAsB7I,YAAOQ,EAAPR,CAAH,MAUnB0I,GAAgB1I,IAAOmF,IAAV,MAOH,qBAAGjF,MAAkBC,OAAOkF,QAE3B,qBAAGyD,aAAiC,SAiCtCC,GA5BI,SAAC,GAAyB,IAAvB/D,EAAsB,EAAtBA,SAAU4C,EAAY,EAAZA,MAAY,EAEYoB,oBAAS,GAFrB,mBAEnCC,EAFmC,KAEdC,EAFc,KAa1C,OACE,kBAAC,IAAD,CAAehJ,MAAOA,IACpB,kBAAC,GAAD,CAAe4I,YAAaG,GAC1B,kBAAC,GAAD,MACA,oCACGjE,EACD,kBAAC6D,GAAD,CAAqBxH,QAfL,WACtB6H,GAAuB,SAAAC,GAAS,OAAKA,OAc/B,YAGJ,kBAAC,GAAD,CAAOvB,MAdS,WAClBsB,GAAuB,SAAAC,GAAS,OAAKA,KACrCvB,KAY6Be,UAAWM,M,yYCnDrC,IAAMG,GAAWpJ,IAAOqJ,GAAV,MACV,qBAAGnJ,MAAkBC,OAAOwE,SACtB,qBAAGzE,MAAkB6F,KAAKG,QAM9BoD,GAAWtJ,IAAOuJ,GAAV,MACV,qBAAGrJ,MAAkBC,OAAOwE,SACtB,qBAAGzE,MAAkB6F,KAAKG,Q,kTCG3C,IAAMsD,GAAiBxJ,IAAOmF,IAAV,MAWdsE,GAAczJ,YAAO0J,KAAP1J,CAAH,MACN,qBAAGE,MAAkBC,OAAOwE,SAGjCgF,G,kLA4BF3D,KAAK2B,MAAM9E,e,+BAyBH,IAAD,OAEP,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,GAAD,CAAY+E,MAAO5B,KAAK2B,MAAM9E,YAC5B,kBAAC2G,GAAD,KAEE,kBAACJ,GAAD,mBACA,kBAACK,GAAD,CAAaG,SAAO,EAACC,YAAU,GAC7B,+BACE,4BACE,iCACA,uCACA,oCACA,sCACA,wCACA,2CAGJ,+BACG7D,KAAK2B,MAAMpF,UACV,4BACE,wBAAIuH,QAAS,IACX,kBAACC,GAAA,EAAD,CAASC,UAAU,aAIvBhE,KAAK2B,MAAMrF,MAgBRgB,KAAI,SAAC2G,EAAMnJ,GAAP,OAaH,kBAAC,EAAD,CACEI,IAAK+I,EAAKrJ,GACVA,GAAIqJ,EAAKrJ,GACTE,MAAOA,EACPH,QAASsJ,EAAKtJ,QACdE,UAAWoJ,EAAKpJ,UAChBR,SAAU4J,EAAK5J,SAGfY,gBAAiB,EAAK0G,MAAMuC,sBAQxClE,KAAK2B,MAAMpF,YAAcyD,KAAK2B,MAAMrF,MAAM6H,QAC1C,kBAACb,GAAD,wD,GAhIQzC,IAAMC,WA6IpBsD,GAAqB,CACzBvH,aACAwH,WX1EwB,SAAAC,GACxBxH,SAhD+B,CAAEH,KA3Cf,gBA6FlBI,MAAM,GAAD,OAAIX,EAAJ,gBAAgC,CACnCmF,OAAQ,OACRC,KAAMC,KAAKC,UAAU4C,KACpBtH,MAAK,WACNF,SAASJ,SWoEXwH,aXjH0B,SAACK,EAAa5J,EAASN,EAAUQ,GAC3D,OAAO,SAAAiC,GAGLe,QAAQE,IAAI,YAAapD,EAASN,GAClC0C,MAAM,GAAD,OAAIX,EAAJ,kBAA0BmI,EAA1B,SAA8C,CACjDhD,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACnB/G,UACAN,WACAQ,WAAYA,MAEbmC,MAAK,WACNF,EAASD,WWuGA2H,gBAXS,SAAA/F,GAAK,MAAK,CAChCnC,MAAOmC,EAAMnC,MACbC,UAAWkC,EAAMlC,UACjBE,MAAOgC,EAAMhC,SAQyB2H,GAAzBI,CAA6Cb,ICjK7Cc,GATH,WACV,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,GAAD,QCHSC,GAND,kBACZ,kBAAC,GAAD,KACE,wBAAIC,MAAO,CAAEC,MAAO,UAApB,oBADF,MCAaC,GAFA,kBAAM,gDCyBNC,GAhBF,WACX,OACE,kBAAC,IAAD,CAAUpH,MAAOa,GACf,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAewG,SAAUC,oBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,KACjC,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWxB,KAChC,kBAAC,IAAD,CAAOuB,KAAK,SAASC,UAAWT,KAChC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWN,SCRvBO,QACW,cAA7BhH,OAAOiH,SAASC,UAEe,UAA7BlH,OAAOiH,SAASC,UAEhBlH,OAAOiH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/I,MAAK,SAAAgJ,GACJA,EAAaC,gBAEdC,OAAM,SAAAzJ,GACLoB,QAAQpB,MAAMA,EAAM0J,c","file":"static/js/main.75a46e49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.e619ffe5.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.e446bef2.svg\";","module.exports = __webpack_public_path__ + \"static/media/logout.4b787771.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.f43c6ff1.svg\";","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Grandstander:wght@100;300;500;800&display=swap');\n\n*, *::before, *::after{\n  box-sizing: border-box;\n}\n\nhtml{\n  font-size: 62.5%;\n}\n\nbody{\n  font-size: 1.6rem;\n  padding: 0;\n  margin: 0;\n  font-family: 'Grandstander', sans-serif;\n  height: 100vh;\n}\n th, td {\n   text-align: center;\n }\n\n`;\n\nexport default GlobalStyle;\n","// TodoItem.js\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport editIcon from 'assets/icons/edit.svg';\nimport deleteIcon from 'assets/icons/trash.svg';\nimport { DATABASE_URL } from 'utils/database';\n\nconst StyledTdWithHover = styled.td`\n  width: 30vw;\n  /* height: 300px; */\n  :hover {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n  ${({ deadline }) =>\n    deadline &&\n    css`\n      width: 8vw;\n    `}\n`;\n\nconst StyledTd = styled.td`\n  cursor: pointer;\n`;\n\nexport const StyledButton = styled.button`\n  color: black;\n  height: 40px;\n  width: 40px;\n  border-radius: 10px;\n`;\n\nconst TodoItem = ({\n  content,\n  id,\n  deadline,\n  completed,\n  index,\n  onEdit,\n  onDelete,\n  onCompleteCheck,\n}) => {\n  const handleOnEdit = () => {\n    onEdit(id);\n  };\n\n  const handleOnDelete = () => {\n    onDelete(id);\n  };\n\n  const handleCompletedCheck = () => {\n    onCompleteCheck(id, content, deadline, completed);\n  };\n\n  return (\n    <tr key={id}>\n      <td className=\"align-middle\">{index + 1}</td>\n      <StyledTdWithHover className=\"align-middle text-xl-left\" as=\"td\">\n        {content}\n      </StyledTdWithHover>\n      <td className=\"align-middle\">\n        <StyledButton onClick={handleOnEdit}>\n          <img src={editIcon} />{' '}\n        </StyledButton>\n      </td>\n      <td className=\"align-middle\">\n        <StyledButton onClick={handleOnDelete}>\n          <img src={deleteIcon} />\n        </StyledButton>\n      </td>\n      <StyledTdWithHover deadline className=\"align-middle\" as=\"td\">\n        {deadline}\n      </StyledTdWithHover>\n      <StyledTd className=\"align-middle\" onClick={handleCompletedCheck}>\n        {completed ? '✔️' : '❌'}\n      </StyledTd>\n    </tr>\n  );\n};\n\nexport default TodoItem;\n","import TodoItem from 'components/Todo/TodoItem';\nimport firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBJrGkMXNIRPDTV6mwtNuFonE5N3conc58',\n  authDomain: 'notes-and-todos-6756c.firebaseapp.com',\n  databaseURL: 'https://notes-and-todos-6756c.firebaseio.com',\n  projectId: 'notes-and-todos-6756c',\n  storageBucket: 'notes-and-todos-6756c.appspot.com',\n  messagingSenderId: '432462096709',\n  appId: '1:432462096709:web:690e4faec4f036d458f62c',\n  measurementId: 'G-LL8BYZF9S7',\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport const DATABASE_URL = firebaseConfig.databaseURL;\n","import { DATABASE_URL } from 'utils/database';\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  editID: null,\n  error: null,\n};\n\n//actions\nconst SET_LOADING = 'SET_LOADING';\nconst ADD_TASK = 'ADD_TASK';\nconst SET_COMPLETED = 'SET_COMPLETED';\nconst SET_TODOS = 'SET_TODOS';\nconst EDIT_TASK = 'EDIT_TASK';\n\nexport const todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        error: null,\n        isLoading: false,\n        editID: null,\n        todos: action.payload,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n\n    case ADD_TASK:\n      return {\n        error: null,\n        isLoading: false,\n        editID: null,\n        todos: action.payload,\n      };\n\n    // case SET_COMPLETED:\n    //   return {\n    //     ...state,\n    //     todos: state.todos.map(task =>\n    //       task.id === action.payload ? { ...task, completed: true } : task,\n    //     ),\n    //   };\n\n    default:\n      return state;\n  }\n};\n\nexport const setLoading = () => ({ type: SET_LOADING });\nexport const setTodos = todos => ({ type: SET_TODOS, payload: todos });\n\n// export const setCompletedAction = (editID, task) => ({\n//   type: SET_COMPLETED,\n//   payload: editID,\n//   todos: task,\n// });\n\nexport const setCompleted = (completedId, content, deadline, completed) => {\n  return dispatch => {\n    // dispatch(setCompletedAction());\n\n    console.log('completed', content, deadline);\n    fetch(`${DATABASE_URL}/todos/${completedId}.json`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        content,\n        deadline,\n        completed: !completed,\n      }),\n    }).then(() => {\n      dispatch(fetchTodos());\n    });\n  };\n};\n\nexport const fetchTodos = () => {\n  return dispatch => {\n    dispatch(setLoading());\n\n    fetch(`${DATABASE_URL}/todos.json`)\n      .then(r => r.json())\n      .then(todos => {\n        const arrayTodos = todos\n          ? Object.keys(todos).map(key => {\n              return {\n                id: key,\n                ...todos[key],\n              };\n            })\n          : [];\n        dispatch(setTodos(arrayTodos));\n      });\n  };\n};\n\nexport const addNewTask = taskData => {\n  dispatch(setLoading());\n\n  fetch(`${DATABASE_URL}/todos/.json`, {\n    method: 'POST',\n    body: JSON.stringify(taskData),\n  }).then(() => {\n    dispatch(setTodos());\n  });\n};\n\n// export const editTask = editID =>{\n//   dispatch(setLoading);\n\n// }\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { todosReducer } from 'reducers';\n\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.log('prev state', store.getState());\n  console.log('dispatching', action);\n  let result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nconst middleware = applyMiddleware(thunk, logger);\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst enhancer = composeEnhancers(middleware);\n\nconst todosStore = createStore(todosReducer, enhancer);\n\nexport default todosStore;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { NavLink, Link, useRouteMatch } from 'react-router-dom';\n\nexport const StyledButton = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-decoration: none;\n  width: 20%;\n  padding: 1rem;\n  height: 60px;\n  background: ${({ theme }) => theme.colors.white};\n  border-radius: 50px;\n  border: none;\n  color: ${({ theme }) => theme.colors.white};\n  font-size: 1em;\n  font-weight: 600;\n  transition: box-shadow 0.3s ease;\n\n  ${({ theme }) => theme.media.desktop} {\n    background: ${({ theme }) => theme.colors.white};\n    color: ${({ theme }) => theme.colors.primary};\n  }\n\n  :hover {\n    box-shadow: 0 10px 20px -15px red;\n    background: ${({ theme }) => theme.colors.primary};\n    color: ${({ theme }) => theme.colors.white};\n    text-decoration: none;\n  }\n  ${({ modal }) => modal && css`\n   width: 40%;\n   /* margin-top: 2rem; */\n  `}\n`;\n\nconst ButtonLink = ({ children, to }) => <StyledButton to={to}>{children}</StyledButton>;\n\nexport default ButtonLink;\n","import React from 'react';\nimport { NavLink, Link, withRouter } from 'react-router-dom';\nimport ButtonLink from 'components/Button/Button';\nimport styled from 'styled-components';\nimport logoutIcon from 'assets/icons/logout.svg';\n\nconst Bar = styled.div`\n  width: 100%;\n  height: 12vh;\n  position: fixed;\n  top: 0;\n  right: 0%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: ${({ isBig }) => (isBig ? '3em' : '1.5em')};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.primary};\n  background: ${({ theme }) => theme.colors.dark};\n`;\n\nconst StyledButtonPlace = styled.div`\n  width: 50%;\n  height: inherit;\n  display: inline-flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst StyledLogo = styled.div`\n  width: 30%;\n  height: 60px;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  color: ${({ theme }) => theme.colors.white};\n  border-radius: 50px;\n  text-align: center;\n  line-height: 60px;\n  /* background: transparent; */\n`;\n\nconst ButtonIcon = styled(Link)`\n  width: 60px;\n  height: 60px;\n  border-radius: 20px;\n  margin-right: 1%;\n  background-image: url(${({ icon }) => icon});\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: 50% 50%;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  color: white;\n  background-color: ${({ active }) => (active ? 'white' : 'transparent')};\n  &.active {\n    background-color: white;\n  }\n`;\n\nconst NavBar = () => (\n  <Bar>\n    <StyledButtonPlace>\n      <StyledLogo>Your Note & ToDo </StyledLogo>\n      <ButtonLink to=\"/todos\">todos</ButtonLink>\n      <ButtonLink to=\"/notes\">notes</ButtonLink>\n    </StyledButtonPlace>\n    <ButtonIcon to=\"signin\" icon={logoutIcon} />\n  </Bar>\n);\n\nexport default NavBar;\n","import { colors } from './colors';\n\nexport const theme = {\n  colors,\n  font: {\n    this: 300,\n    regular: 400,\n    bold: 600,\n  },\n  fontSize: {\n    xxs: '1rem',\n    xs: '1.2rem',\n    s: '1.6rem',\n    m: '2.1rem',\n    l: '2.4rem',\n    xl: '4rem',\n  },\n  media: {\n    phone: '@media(min-width: 1024px)',\n    desktop: '@media(min-width: 724px)',\n  }\n\n};\n","export const colors = {\n  white: '#ffffff',\n  primary: '#3ec2e9',\n  dark: '#0f1c21',\n  blur: 'grey'\n  // hover: '#'\n};\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport saveIcon from 'assets/icons/save.svg';\nimport deleteIcon from 'assets/icons/trash.svg';\n\nimport { StyledButton } from 'components/Todo/TodoItem';\nimport { DATABASE_URL } from 'utils/database';\n\nexport const StyledInput = styled.input`\n  background-color: lightgray;\n  border: none;\n  border-radius: 20px;\n  width: 30vw;\n  /* margin-top: 1rem;\n  margin-bottom: 1rem; */\n  padding: 8px 16px;\n\n  ::placeholder {\n    text-transform: uppercase;\n    letter-spacing: 1px;\n  }\n  ${({ deadline }) =>\n    deadline &&\n    css`\n      width: 8vw;\n    `}\n`;\n\nclass TodoInput extends React.Component {\n  state = {\n    content: this.props.content,\n    deadline: this.props.deadline,\n    completed: this.props.completed,\n  };\n\n  handleOnSave = () => {\n    fetch(`${DATABASE_URL}/todos/${this.props.id}.json`, {\n      method: 'PUT',\n      body: JSON.stringify(this.state),\n    }).then(() => {\n      this.props.onSave(this.props.id);\n    });\n  };\n\n  handleOnDelete = () => {\n    this.props.onDelete(this.props.id);\n  };\n  handleInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n\n\n  render() {\n    const { index, id } = this.props;\n    const { content, deadline, completed } = this.state;\n    return (\n      <>\n        <tr key={id}>\n          <td className=\"align-middle\">{index + 1}</td>\n          <td className=\"align-middle\">\n            <StyledInput name=\"content\" value={content} onChange={this.handleInputChange} />\n          </td>\n\n          <td className=\"align-middle\">\n            <StyledButton onClick={this.handleOnSave}>\n              <img src={saveIcon} alt=\"save icon\" />\n            </StyledButton>\n          </td>\n          <td className=\"align-middle\">\n            <StyledButton onClick={this.handleOnDelete}>\n              <img src={deleteIcon} />\n            </StyledButton>\n          </td>\n\n          <td className=\"align-middle\">\n            <StyledInput\n              name=\"deadline\"\n              deadline\n              value={deadline}\n              onChange={this.handleInputChange}\n            />\n          </td>\n          <td className=\"align-middle\">{completed ? '✔️' : '❌'}</td>\n        </tr>\n      </>\n    );\n  }\n}\n\nexport default TodoInput;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { StyledInput } from 'components/Todo/TodoInput'\nimport { StyledButton } from 'components/Button/Button'\nimport { DATABASE_URL } from 'utils/database';\n\n\nconst StyledLabel = styled.label`\n   color: white;\n   display: block;\n`;\n\n\nconst StyledModalInput = styled(StyledInput)`\nwidth: 70%;\nmargin: 1rem auto;\n`;\n\nconst StyledForm = styled.form`\ndisplay: flex;\nheight: 100%;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n`;\n\n\nconst StyledButtonWrapper = styled.div`\n display: flex;\n justify-content: space-evenly;\nwidth: 90%;\nmargin-top: auto;\n\n\n`;\n\nclass AddTask extends Component {\n  state = {\n    content: '',\n    deadline: '',\n    completed: false,\n  };\n\n  putDataInDatabase = () => {\n    fetch(`${DATABASE_URL}/todos/.json`, {\n      method: 'POST',\n      body: JSON.stringify(this.state),\n    })\n      .then(() => {\n        this.props.onAdd();\n      })\n      .then(() => {\n        this.setState({\n          content: '',\n          deadline: '',\n        });\n      });\n  };\n\n  handleOnInputClick = e => {\n    e.preventDefault();\n    if (!this.state.content) {\n      return alert('wprowadź zadanie');\n    }\n    this.putDataInDatabase();\n\n  };\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n  render() {\n    return (\n      <StyledForm>\n        <StyledLabel htmlFor=\"newTask\">Dodaj zadanie:</StyledLabel>\n        <StyledModalInput\n          name=\"content\"\n          placeholder=\"wprowadź nowe zadanie\"\n          value={this.state.content}\n          onChange={this.handleOnChange}\n        ></StyledModalInput>\n        <StyledModalInput deadline\n          name=\"deadline\"\n          placeholder=\"wprowadź deadline\"\n          value={this.state.deadline}\n          onChange={this.handleOnChange}\n        ></StyledModalInput>\n        <StyledButtonWrapper>\n\n          <StyledButton modal type=\"submit\" onClick={this.handleOnInputClick}>\n            Dodaj zadanie\n        </StyledButton>\n          <StyledButton onClick={this.onQuit}>quit</StyledButton>\n        </StyledButtonWrapper>\n      </StyledForm>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from 'react'\nimport styled from 'styled-components';\nimport { theme } from 'utils/theme';\nimport AddTask from 'components/Form/Form'\n\nconst StyledWrapper = styled.div`\nborder: 5px solid ${({ theme }) => theme.colors.primary};\nz-index: 1;\nposition: fixed;\ndisplay: ${({ isVisible }) => isVisible ? 'flex' : 'none'};\npadding: 2rem;\nflex-direction: column;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nheight: 50%;\nwidth: 50%;\nbackground-color: ${({ theme }) => theme.colors.dark};\nbox-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);\n/* transform: translate(${({ isVisible }) => (isVisible ? '-100%' : '100%')}); */\ntransition: transform 0.25s ease -in -out;\n`;\n\n\n\nconst Modal = ({ isVisible, onAdd }) => {\n\n\treturn (\n\t\t<StyledWrapper isVisible={isVisible}>\n\t\t\t<AddTask onAdd={onAdd}></AddTask>\n\n\t\t</StyledWrapper>\n\t)\n};\n\n\n\nexport default Modal;","import React, { useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport NavBar from 'components/NavBar/NavBar.js';\nimport { theme } from '../utils/theme';\nimport { StyledButton } from 'components/Button/Button';\nimport Modal from 'components/Modal/Modal'\n\n\nconst StyledAddItemButton = styled(StyledButton)`\nposition: fixed;\ntop: 90%;\nleft: 90%;\nwidth: 60px;\nheight: 60px;\nz-index: 2;\n\n`;\n\nconst StyledWrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n  /* display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center; */\n  background: ${({ theme }) => theme.colors.dark};\n\n  filter: blur(${({ onModalOpen }) => onModalOpen && '5px'});\n`;\n\n\n\nconst MainLayout = ({ children, onAdd }) => {\n\n  const [isNewItemBarVisible, setIsNewItemBarVisible] = useState(false);\n\n  const handleIsVisible = () => {\n    setIsNewItemBarVisible(prevState => !prevState);\n  };\n\n  const isModalOpen = () => {\n    setIsNewItemBarVisible(prevState => !prevState);\n    onAdd();\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <StyledWrapper onModalOpen={isNewItemBarVisible}>\n        <NavBar />\n        <>\n          {children}\n          <StyledAddItemButton onClick={handleIsVisible}>➕</StyledAddItemButton>\n        </>\n      </StyledWrapper>\n      <Modal onAdd={isModalOpen} isVisible={isNewItemBarVisible} />\n    </ThemeProvider>\n  )\n\n};\n\nexport default MainLayout;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const StyledH1 = styled.h1`\n  color: ${({ theme }) => theme.colors.white};\n  font-weight: ${({ theme }) => theme.font.bold};\n  text-align: center;\n  padding: 1rem;\n`;\n\n\nexport const StyledH2 = styled.h2`\n  color: ${({ theme }) => theme.colors.white};\n  font-weight: ${({ theme }) => theme.font.bold};\n  text-align: center;\n  padding: 3rem;\n  margin-bottom: 4rem;\n  position: relative;\n  top: 13vh;\n  /* background-color: red; */\n`;","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport MainLayout from 'Layout/MainLayout';\nimport GlobalStyle from 'Theme/GlobalStyle';\nimport { StyledH1 } from 'components/H1/H1';\nimport { StyledH2 } from 'components/H1/H1';\nimport TodoItem from 'components/Todo/TodoItem';\nimport Table from 'react-bootstrap/Table';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { DATABASE_URL } from 'utils/database';\nimport TodoInput from 'components/Todo/TodoInput';\nimport AddTask from 'components/Form/Form';\n\nimport { fetchTodos, addNewTask, setCompleted } from 'reducers';\n\nconst StyledTodoList = styled.div`\n  width: 60%;\n  margin: 0 auto;\n  position: relative;\n  top: 13vh;\n\n  @media (max-width: 1200px) {\n    width: 80%;\n  }\n`;\n\nconst StyledTable = styled(Table)`\n  color: ${({ theme }) => theme.colors.white};\n`;\n\nclass Todos extends React.Component {\n  // state = {\n  //   todos: [],\n  //   isLoading: true,\n  //   editID: null,\n  // };\n\n  // fetchTodos = () => {\n  //   fetch(`${DATABASE_URL}/todos.json`)\n  //     .then(r => r.json())\n  //     .then(todos => {\n  //       const arrayTodos = todos\n  //         ? Object.keys(todos).map(key => {\n  //             return {\n  //               id: key,\n  //               ...todos[key],\n  //             };\n  //           })\n  //         : [];\n  //       console.log(arrayTodos);\n  //       this.setState({\n  //         todos: arrayTodos,\n  //         isLoading: false,\n  //       });\n  //     });\n  // };\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n  // saveClicked = editID => {\n  //   this.fetchTodos();\n  //   this.setState({\n  //     editID: null,\n  //   });\n  // };\n\n  // handleEdit = editID => {\n  //   this.setState({ editID });\n  // };\n\n  // handleDeleteClick = deletedId => {\n  //   fetch(`${DATABASE_URL}/todos/${deletedId}.json`, {\n  //     method: 'DELETE',\n  //   }).then(() => {\n  //     this.fetchTodos();\n  //   });\n  // };\n\n  // handleCompleteCheck = () => {\n  //   this.props.setCompleted(this.props.completeID);\n  // };\n\n  render() {\n    // const { isLoading, todos, editID } = this.state;\n    return (\n      <>\n        <GlobalStyle />\n        <MainLayout onAdd={this.props.fetchTodos}>\n          <StyledTodoList>\n            {/* tutaj wrzucić LI LOADING  */}\n            <StyledH1>Todos List</StyledH1>\n            <StyledTable striped responsive>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Content</th>\n                  <th>Edit</th>\n                  <th>Remove</th>\n                  <th>Deadline</th>\n                  <th>Completed</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.props.isLoading ? (\n                  <tr>\n                    <td colSpan={12}>\n                      <Spinner animation=\"border\" />\n                    </td>\n                  </tr>\n                ) : (\n                  this.props.todos\n                    // .filter(todo => {\n                    //   const textFilter = todo.title\n                    //     .toLowerCase()\n                    //     .includes(this.state.filter.toLowerCase());\n\n                    //   if (this.state.showCompleted && this.state.showInCompleted) {\n                    //     return textFilter;\n                    //   } else if (this.state.showCompleted) {\n                    //     return textFilter && todo.completed === true;\n                    //   } else if (this.state.showInCompleted) {\n                    //     return textFilter && todo.completed === false;\n                    //   } else {\n                    //     return false;\n                    //   }\n                    // })\n                    .map((todo, index) => (\n                      // editID === todo.id ? (\n                      //   <TodoInput\n                      //     key={todo.id}\n                      //     id={todo.id}\n                      //     index={index}\n                      //     content={todo.content}\n                      //     completed={todo.completed}\n                      //     deadline={todo.deadline}\n                      //     onSave={this.saveClicked}\n                      //     onDelete={this.handleDeleteClick}\n                      //   />\n                      // ) : (\n                      <TodoItem\n                        key={todo.id}\n                        id={todo.id}\n                        index={index}\n                        content={todo.content}\n                        completed={todo.completed}\n                        deadline={todo.deadline}\n                        // onEdit={this.handleEdit}\n                        // onDelete={this.handleDeleteClick}\n                        onCompleteCheck={this.props.setCompleted}\n                      />\n                    ))\n                )}\n              </tbody>\n            </StyledTable>\n            {/* </>} */}\n          </StyledTodoList>\n          {!this.props.isLoading && !this.props.todos.length && (\n            <StyledH2>Your todo list is empty! Enter new task! </StyledH2>\n          )}\n        </MainLayout>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  todos: state.todos,\n  isLoading: state.isLoading,\n  error: state.error,\n});\nconst mapDispatchToProps = {\n  fetchTodos,\n  addNewTask,\n  setCompleted,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import React, { useState } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport MainLayout from 'Layout/MainLayout';\nimport NavBar from 'components/NavBar/NavBar.js';\nimport GlobalStyles from 'Theme/GlobalStyle';\n\nconst App = () => {\n  return (\n    <>\n      <GlobalStyles />\n      <MainLayout />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport MainLayout from 'Layout/MainLayout';\n\nconst Notes = () => (\n  <MainLayout>\n    <h1 style={{ color: 'white' }}>my private notes</h1>;\n  </MainLayout>\n);\n\nexport default Notes;\n","import React from 'react';\n\nconst SignIn = () => <h1>please Sign In </h1>;\n\nexport default SignIn;\n","import React, { useState } from 'react';\nimport GlobalStyle from 'Theme/GlobalStyle';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Switch, Link, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport todosStore from 'store/todosStore';\nimport Todos from 'components/views/Todos';\nimport App from 'components/views/App';\nimport Notes from 'components/views/Notes';\nimport SignIn from 'components/views/SignIn';\n\nconst Root = () => {\n  return (\n    <Provider store={todosStore}>\n      <GlobalStyle />\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={App} />\n          <Route path=\"/todos\" component={Todos} />\n          <Route path=\"/notes\" component={Notes} />\n          <Route path=\"/signin\" component={SignIn} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/views/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}